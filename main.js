//setSeed(101);

const roadlanes = 5;

const carCanvas = document.getElementById("carCanvas");
carCanvas.width = 500;
const networkCanvas = document.getElementById("networkCanvas");
networkCanvas.width = 400;
const nCars = document.getElementById("Ncars");

const carCtx = carCanvas.getContext("2d");
const networkCtx = networkCanvas.getContext("2d");

const road = new Road(carCanvas.width / 2, carCanvas.width * 0.9, roadlanes);

let trainedBrain = '{"levels":[{"inputs":[0.45197390372611523,0.2815664611567832,0,0,0,0.5699754849790147,0.6671721314396101],"outputs":[1,0,1,0,1,0,0,0],"biases":[-0.012796375623385703,0.060850176332161755,-0.09157712765337073,0.04768434900053172,-0.09452541854384323,0.1028417111470263,-0.004300806803735836,-0.058937217723652444],"weights":[[0.06738514606833458,-0.07886142725470865,0.002706548841914693,0.07292465596118036,-0.04325850554027634,-0.10607360713424481,-0.02052345923622714,-0.13570775237192814],[-0.08015124098580745,-0.07703562352750201,0.04111626082406393,-0.14046135344531624,-0.10451464537983288,0.08391097023942165,-0.08135549405589877,0.05018853998130604],[0.06717959883826957,-0.00496860469623178,0.057306275472804154,-0.006950942769523822,-0.0003602436263231458,0.07132735631449065,-0.04008301604776775,0.019414744373933954],[0.0894589326154255,0.04356928667378201,-0.06763083987193469,-0.0013943672786160231,0.0006188019596306469,-0.017532141617500552,0.08367831710731158,-0.16129394212914522],[0.08491842567752761,-0.06057186957979458,0.05978042178939607,0.06721269520959071,0.07456188375295766,-0.0028649193866020447,0.14338601211999646,-0.06980352759524089],[0.05794461679878462,-0.15973148601824388,0.14159880101985023,0.06560265427915367,-0.009273030538129348,0.0007806136880425538,0.0059904757756963165,-0.05633576394941879],[0.13664069676714258,-0.057386295778507526,0.08225779212391646,-0.019731514174891693,-0.0027565662894817,-0.016622907617291342,0.033252659386482,0.0012105179056036714]]},{"inputs":[1,0,1,0,1,0,0,0],"outputs":[0,0,0,0,0,1,0,0],"biases":[0.03405316336507613,0.09449988164833953,0.020933704028199513,-0.07307253667908767,0.08238431317026115,-0.11861832184405921,0.1745456276195239,0.059441400063156104],"weights":[[0.08464164035560479,0.1121123757265712,-0.08725912925214338,-0.133365284430413,-0.07322166394328092,-0.06048920876087716,-0.0004658894010302684,-0.08833679528506948],[-0.004503373669143407,-0.0405883444642629,-0.03382984007960534,0.05432558799943691,-0.04535979683753996,0.03782639892540365,-0.15216839277565167,-0.031180150926297966],[-0.0627893615636121,-0.021344562685373755,0.017973593890036475,-0.11593064246866583,-0.03779976339917787,0.05748003813131217,-0.08794764850664674,-0.09593105509242869],[-0.07444271836378887,0.09935683081189828,-0.006009321178005295,0.024345693301998192,-0.04890705858284678,0.003923925216631611,0.1334463023147909,-0.05977052029349907],[-0.05328847492621323,-0.015461614501498801,-0.04021329474487602,-0.01373635230779506,-0.12463878703767918,0.020625894707454722,0.04163411424928755,-0.06777797221840909],[0.044367478576667646,-0.0059797561100745035,-0.16299441777329765,0.03637038594404192,0.1339475582696432,-0.010549213839364323,0.03365786327463684,0.0842108602237028],[0.1677567508738903,0.02521430853461536,-0.06286948402150982,-0.009705275876730264,0.05006408464471042,0.009834484597454708,-0.02876042328638001,0.11052970121290787],[0.04149454956791467,0.04551046033743444,-0.01677401099056189,0.09888224800286213,0.045527567288961054,0.037362043455748915,-0.09408321961086648,0.10459405769796132]]},{"inputs":[0,0,0,0,0,1,0,0],"outputs":[0,0,1,0],"biases":[-0.0035402065635798015,0.024812069241867327,0.003105596362975181,0.048059672281072344],"weights":[[0.17148775987021217,0.0883915576242452,-0.11191878152628774,0.02420071162768998],[0.0808943826536865,-0.006499612327780273,-0.0024527604980819715,-0.08468166300331442],[0.06432284345850939,0.05450311092050034,-0.06815024984829128,-0.09924414908798082],[-0.1032407041745656,0.061719842137718334,0.09856477908848954,0.09769013993050667],[0.07565657070112494,0.04690225999787621,-0.06394340479707665,0.0019300043020659685],[-0.058432963794632135,-0.05362088299189925,0.05522940123273895,-0.009204827520796627],[-0.005426021930475251,-0.14062652282543397,0.02159172657221757,0.007995576449503591],[-0.049306401401633324,0.005940590005400023,-0.10021492560525692,0.05335047214601928]]}]}'
 //trainedBrain = false;
const N = 100;
const cars = generateCars(N);
let bestCar = cars[0];

if (trainedBrain) {
  for (let i = 0; i < cars.length; i++) {
    cars[i].brain = JSON.parse(trainedBrain);
    if (i != 0) {
      NeuralNetwork.mutate(cars[i].brain, 0.01);
    }
    2;
  }
}

if (localStorage.getItem("bestBrain")) {
  for (let i = 0; i < cars.length; i++) {
    cars[i].brain = JSON.parse(localStorage.getItem("bestBrain"));
    if (i != 0) {
      NeuralNetwork.mutate(cars[i].brain, 0.01);
    }
  }
}

let traffic = [];

let laneArray = [1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3];
let speedArray = [
  1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1,
  1.2, 1.1, 1.2, 1.1,
];

for (let i = 0; i < 18; i++) {
  traffic.push(
    new Car(
      road.getLaneCenter(laneArray[i]),
      -150 * i - 300,
      30,
      50,
      "DUMMY",
      getRandomFloat(1, 3),
      //2,
      getRandomColor()
    )
  );
}

animate();

function save() {
  localStorage.setItem("bestBrain", JSON.stringify(bestCar.brain));
}

function discard() {
  localStorage.removeItem("bestBrain");
}

function generateCars(N) {
  const cars = [];
  for (let i = 1; i <= N; i++) {
    cars.push(new Car(road.getLaneCenter(2), 100, 30, 50, "AI", 4, "blue", i));
  }
  return cars;
}

function removeCar(id) {
  const index = cars.findIndex((c) => c.id == id);
  cars.splice(index, 1);
}

function animate(time) {
  for (let i = 0; i < traffic.length; i++) {
    traffic[i].update(road.borders, []);
  }
  for (let i = 0; i < cars.length; i++) {
    cars[i].update(road.borders, traffic);
  }
  bestCar = cars.find((c) => c.y == Math.min(...cars.map((c) => c.y)));

  for (let i = 0; i < traffic.length; i++) {
    if (-traffic[i].y + bestCar.y < -1000) {
      traffic[i].y = bestCar.y - 1000;
      //traffic[i].x=road.getLaneCenter(getRandomInt(0, roadlanes-1))
    }
  }

  carCanvas.height = window.innerHeight;
  networkCanvas.height = window.innerHeight;

  carCtx.save();
  carCtx.translate(0, -bestCar.y + carCanvas.height * 0.7);

  road.draw(carCtx);
  for (let i = 0; i < traffic.length; i++) {
    traffic[i].draw(carCtx);
  }
  carCtx.globalAlpha = 0.2;
  for (let i = 0; i < cars.length; i++) {
    cars[i].draw(carCtx);
  }
  carCtx.globalAlpha = 1;
  bestCar.draw(carCtx, true);

  carCtx.restore();

  nCars.innerHTML = cars.length;

  //networkCtx.lineDashOffset = -time / 50;
 
 
  Visualizer.drawNetwork(networkCtx, bestCar.brain);
  
  
  requestAnimationFrame(animate);
}
