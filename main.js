//setSeed(101);

const roadlanes = 5;

const carCanvas = document.getElementById("carCanvas");
carCanvas.width = 500;
const networkCanvas = document.getElementById("networkCanvas");
networkCanvas.width = 400;
const nCars = document.getElementById("Ncars");

const carCtx = carCanvas.getContext("2d");
const networkCtx = networkCanvas.getContext("2d");

const road = new Road(carCanvas.width / 2, carCanvas.width * 0.9, roadlanes);

let trainedBrain = '{"levels":[{"inputs":[0.30080778913140804,0.13560097293135986,0,0,0.4979646982160667,0.4772005880506399,0],"outputs":[1,0,1,1,1,0,1,0],"biases":[-0.016080984105477935,0.06030126533836083,-0.10490408786717645,0.057683982147230355,-0.09782102739243777,0.11569855260513844,-0.001965157961774662,-0.05033262113976824],"weights":[[0.07302280635186592,-0.08616053291111848,-0.007314373457492867,0.06308413646970022,-0.043136268120950685,-0.09573179911546656,-0.016671168351437074,-0.13481014439553873],[-0.0641507953989681,-0.08534663186905372,0.0440711878521617,-0.14115420064969697,-0.10072787075146204,0.0653044790880425,-0.07012899258935514,0.0412205528551283],[0.0511708928046884,0.0005897393089403804,0.05876724604147701,-0.007530619076577578,0.008044339846794599,0.07279017573059066,-0.03531640150152569,0.02814528153415901],[0.08928398383286507,0.03930771990542412,-0.06367549751333415,-0.013992514939069719,-0.009069217770413932,-0.012092093983153166,0.06492591489340199,-0.15441409771087353],[0.07192072817296061,-0.05406355136841391,0.0655915476955423,0.07610636929051591,0.07198370618521328,-0.0004649561658126673,0.13427658012898755,-0.06816666525586115],[0.05043859305720824,-0.15502048733642038,0.13796271153729714,0.06384883032914244,-0.005096987630040501,0.016743032074935653,0.002398502414690663,-0.058106382883406305],[0.13839052664862184,-0.050492996194089,0.08044695636666509,-0.017071251880005064,-0.0023126465884611186,-0.032359798374159254,0.027134495553091234,0.008778904346532673]]},{"inputs":[1,0,1,1,1,0,1,0],"outputs":[1,1,0,0,0,1,0,0],"biases":[0.03418795845377823,0.10511708246562718,0.03483976174903231,-0.08153884832728062,0.08965869161055715,-0.11126207326313266,0.17893740793584062,0.049876287512196124],"weights":[[0.08624038134126776,0.1138608858204632,-0.07056237492129892,-0.1400806899223462,-0.07122723621902431,-0.04935390781983827,-0.0021011512541618694,-0.10227953720735375],[-0.00596849476196092,-0.02900935108118429,-0.03794275063386268,0.04977844090044931,-0.050934992697542925,0.03157703238777383,-0.1566027332162953,-0.038995154959515235],[-0.07140736419456262,-0.010594562118852001,0.03023875788364154,-0.11890773534117308,-0.04085527819282484,0.04670734591011796,-0.07708656424884028,-0.09770807575884602],[-0.07676517107159843,0.09839297795729013,-0.002603040592219085,0.02191292032135295,-0.0517667076760427,0.006515778450822586,0.12566112926022951,-0.04833124492912763],[-0.05624585757991103,-0.008823649531400996,-0.03709922363729464,-0.013703565585832118,-0.11044688651778346,0.012299410597177367,0.04547441221529767,-0.0815739867471236],[0.04716354212674582,-0.012618681702984177,-0.15899033101851048,0.044405776709536326,0.13028828082839386,0.003742750388642804,0.04768116520972358,0.07967140540894938],[0.1719393029817556,0.03170461764880949,-0.06115502466047578,-0.007872219606937635,0.0469594361268287,0.0010825094234684517,-0.02325050823558198,0.11394352006042179],[0.024576845320549316,0.041916394312310985,-0.007241103803527363,0.09416214911160331,0.02886520912189159,0.0522253685150402,-0.08925210513398625,0.10891667229077126]]},{"inputs":[1,1,0,0,0,1,0,0],"outputs":[1,1,0,0],"biases":[-0.014228397427612567,0.008399522980281349,-0.0023023312104782784,0.04335922959644852],"weights":[[0.1821971314907753,0.08844299416257334,-0.11690014287264358,0.028525577711509487],[0.08173619183660169,0.006236701344766665,0.00906013346576997,-0.0952845672202826],[0.0657856956821471,0.05001461101139944,-0.060199321429094906,-0.10925673346320001],[-0.10100058923900948,0.05188817460066513,0.1031654292281991,0.09921808091065316],[0.07675725084940847,0.05537587638931108,-0.05431157404240142,-0.013670065732493191],[-0.05860996473728569,-0.05352250176567728,0.03752736729685538,-0.009892308580957068],[-0.004523651283453042,-0.1270294363293051,0.016952200674975874,0.010257985074082123],[-0.06257285336928493,0.0015632948140773305,-0.09894469875426078,0.05577529751474229]]}]}';
 //trainedBrain = false;
const N = 100;
const cars = generateCars(N);
let bestCar = cars[0];

if (trainedBrain) {
  for (let i = 0; i < cars.length; i++) {
    cars[i].brain = JSON.parse(trainedBrain);
    if (i != 0) {
      NeuralNetwork.mutate(cars[i].brain, 0.01);
    }
    2;
  }
}

if (localStorage.getItem("bestBrain")) {
  for (let i = 0; i < cars.length; i++) {
    cars[i].brain = JSON.parse(localStorage.getItem("bestBrain"));
    if (i != 0) {
      NeuralNetwork.mutate(cars[i].brain, 0.01);
    }
  }
}

let traffic = [];

let laneArray = [1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3];
let speedArray = [
  1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1,
  1.2, 1.1, 1.2, 1.1,
];

for (let i = 0; i < 18; i++) {
  traffic.push(
    new Car(
      road.getLaneCenter(laneArray[i]),
      -150 * i - 300,
      30,
      50,
      "DUMMY",
      getRandomFloat(1, 3),
      //2,
      getRandomColor()
    )
  );
}

animate();

function save() {
  localStorage.setItem("bestBrain", JSON.stringify(bestCar.brain));
}

function discard() {
  localStorage.removeItem("bestBrain");
}

function generateCars(N) {
  const cars = [];
  for (let i = 1; i <= N; i++) {
    cars.push(new Car(road.getLaneCenter(2), 100, 30, 50, "AI", 4, "blue", i));
  }
  return cars;
}

function removeCar(id) {
  const index = cars.findIndex((c) => c.id == id);
  cars.splice(index, 1);
}

function animate(time) {
  for (let i = 0; i < traffic.length; i++) {
    traffic[i].update(road.borders, []);
  }
  for (let i = 0; i < cars.length; i++) {
    cars[i].update(road.borders, traffic);
  }
  bestCar = cars.find((c) => c.y == Math.min(...cars.map((c) => c.y)));

  for (let i = 0; i < traffic.length; i++) {
    if (-traffic[i].y + bestCar.y < -1000) {
      traffic[i].y = bestCar.y - 1000;
      //traffic[i].x=road.getLaneCenter(getRandomInt(0, roadlanes-1))
    }
  }

  carCanvas.height = window.innerHeight;
  networkCanvas.height = window.innerHeight;

  carCtx.save();
  carCtx.translate(0, -bestCar.y + carCanvas.height * 0.7);

  road.draw(carCtx);
  for (let i = 0; i < traffic.length; i++) {
    traffic[i].draw(carCtx);
  }
  carCtx.globalAlpha = 0.2;
  for (let i = 0; i < cars.length; i++) {
    cars[i].draw(carCtx);
  }
  carCtx.globalAlpha = 1;
  bestCar.draw(carCtx, true);

  carCtx.restore();

  nCars.innerHTML = cars.length;

  if (cars.length < N/1.5) {
   //save best car to localstorage and reload
    console.log("saving");
   save();
    location.reload();
  }

  //networkCtx.lineDashOffset = -time / 50;
 
 
  Visualizer.drawNetwork(networkCtx, bestCar.brain);
  
  
  requestAnimationFrame(animate);
}
